import cv2
import pandas as pd
from google.colab import files
import matplotlib.pyplot as plt

# Upload the image
uploaded = files.upload()
image_path = list(uploaded.keys())[0]

# Read the image
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
plt.imshow(img)
plt.title("Uploaded Image")
plt.show()

# Large color dataset
colors = [
    {"color": "Red", "R": 255, "G": 0, "B": 0},
    {"color": "Green", "R": 0, "G": 255, "B": 0},
    {"color": "Blue", "R": 0, "G": 0, "B": 255},
    {"color": "Yellow", "R": 255, "G": 255, "B": 0},
    {"color": "Orange", "R": 255, "G": 165, "B": 0},
    {"color": "Purple", "R": 128, "G": 0, "B": 128},
    {"color": "Pink", "R": 255, "G": 192, "B": 203},
    {"color": "Black", "R": 0, "G": 0, "B": 0},
    {"color": "White", "R": 255, "G": 255, "B": 255},
    {"color": "Gray", "R": 128, "G": 128, "B": 128},
    {"color": "Brown", "R": 165, "G": 42, "B": 42},
    {"color": "Cyan", "R": 0, "G": 255, "B": 255},
    {"color": "Magenta", "R": 255, "G": 0, "B": 255},
    {"color": "Lime", "R": 0, "G": 255, "B": 0},
    {"color": "Olive", "R": 128, "G": 128, "B": 0},
    {"color": "Maroon", "R": 128, "G": 0, "B": 0},
    {"color": "Navy", "R": 0, "G": 0, "B": 128},
    {"color": "Teal", "R": 0, "G": 128, "B": 128},
    {"color": "Silver", "R": 192, "G": 192, "B": 192},
    {"color": "Gold", "R": 255, "G": 215, "B": 0},
    {"color": "SkyBlue", "R": 135, "G": 206, "B": 235},
    {"color": "Coral", "R": 255, "G": 127, "B": 80},
    {"color": "Turquoise", "R": 64, "G": 224, "B": 208},
    {"color": "Violet", "R": 238, "G": 130, "B": 238},
    {"color": "Salmon", "R": 250, "G": 128, "B": 114},
    {"color": "Khaki", "R": 240, "G": 230, "B": 140},
    {"color": "Indigo", "R": 75, "G": 0, "B": 130},
    {"color": "Chocolate", "R": 210, "G": 105, "B": 30},
    {"color": "Orchid", "R": 218, "G": 112, "B": 214},
]
colors_df = pd.DataFrame(colors)

# Function to find closest color name
def get_color_name(R, G, B):
    minimum = float('inf')
    color_name = ""
    for i in range(len(colors_df)):
        d = abs(R - int(colors_df.loc[i, "R"])) + abs(G - int(colors_df.loc[i, "G"])) + abs(B - int(colors_df.loc[i, "B"]))
        if d < minimum:
            minimum = d
            color_name = colors_df.loc[i, "color"]
    return color_name

# Detect colors by coordinates input
detected_colors = []

while True:
    coords = input("Enter coordinates as X,Y (or type 'exit' to finish): ")
    if coords.lower() == "exit":
        break
    try:
        x, y = map(int, coords.split(","))
        R, G, B = img[y, x]
        color_name = get_color_name(R, G, B)
        print(f"Detected Color: {color_name} (R={R}, G={G}, B={B})")
        detected_colors.append([color_name, R, G, B])
    except Exception as e:
        print("Invalid input or coordinates out of range. Try again.")

# Save detected colors to CSV
if detected_colors:
    df = pd.DataFrame(detected_colors, columns=["Color", "R", "G", "B"])
    df.to_csv("detected_colors.csv", index=False)
    print("Detected colors saved to detected_colors.csv")
  
